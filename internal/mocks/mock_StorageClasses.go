// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	datastore "github.com/ipfs/go-datastore"
	id "github.com/tcfw/otter/pkg/id"

	mock "github.com/stretchr/testify/mock"
)

// MockStorageClasses is an autogenerated mock type for the StorageClasses type
type MockStorageClasses struct {
	mock.Mock
}

type MockStorageClasses_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageClasses) EXPECT() *MockStorageClasses_Expecter {
	return &MockStorageClasses_Expecter{mock: &_m.Mock}
}

// Private provides a mock function with given fields: pk
func (_m *MockStorageClasses) Private(pk id.PrivateKey) (datastore.Batching, error) {
	ret := _m.Called(pk)

	if len(ret) == 0 {
		panic("no return value specified for Private")
	}

	var r0 datastore.Batching
	var r1 error
	if rf, ok := ret.Get(0).(func(id.PrivateKey) (datastore.Batching, error)); ok {
		return rf(pk)
	}
	if rf, ok := ret.Get(0).(func(id.PrivateKey) datastore.Batching); ok {
		r0 = rf(pk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Batching)
		}
	}

	if rf, ok := ret.Get(1).(func(id.PrivateKey) error); ok {
		r1 = rf(pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageClasses_Private_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Private'
type MockStorageClasses_Private_Call struct {
	*mock.Call
}

// Private is a helper method to define mock.On call
//   - pk id.PrivateKey
func (_e *MockStorageClasses_Expecter) Private(pk interface{}) *MockStorageClasses_Private_Call {
	return &MockStorageClasses_Private_Call{Call: _e.mock.On("Private", pk)}
}

func (_c *MockStorageClasses_Private_Call) Run(run func(pk id.PrivateKey)) *MockStorageClasses_Private_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(id.PrivateKey))
	})
	return _c
}

func (_c *MockStorageClasses_Private_Call) Return(_a0 datastore.Batching, _a1 error) *MockStorageClasses_Private_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageClasses_Private_Call) RunAndReturn(run func(id.PrivateKey) (datastore.Batching, error)) *MockStorageClasses_Private_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateFromPublic provides a mock function with given fields: pk
func (_m *MockStorageClasses) PrivateFromPublic(pk id.PublicID) (datastore.Batching, error) {
	ret := _m.Called(pk)

	if len(ret) == 0 {
		panic("no return value specified for PrivateFromPublic")
	}

	var r0 datastore.Batching
	var r1 error
	if rf, ok := ret.Get(0).(func(id.PublicID) (datastore.Batching, error)); ok {
		return rf(pk)
	}
	if rf, ok := ret.Get(0).(func(id.PublicID) datastore.Batching); ok {
		r0 = rf(pk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Batching)
		}
	}

	if rf, ok := ret.Get(1).(func(id.PublicID) error); ok {
		r1 = rf(pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageClasses_PrivateFromPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateFromPublic'
type MockStorageClasses_PrivateFromPublic_Call struct {
	*mock.Call
}

// PrivateFromPublic is a helper method to define mock.On call
//   - pk id.PublicID
func (_e *MockStorageClasses_Expecter) PrivateFromPublic(pk interface{}) *MockStorageClasses_PrivateFromPublic_Call {
	return &MockStorageClasses_PrivateFromPublic_Call{Call: _e.mock.On("PrivateFromPublic", pk)}
}

func (_c *MockStorageClasses_PrivateFromPublic_Call) Run(run func(pk id.PublicID)) *MockStorageClasses_PrivateFromPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(id.PublicID))
	})
	return _c
}

func (_c *MockStorageClasses_PrivateFromPublic_Call) Return(_a0 datastore.Batching, _a1 error) *MockStorageClasses_PrivateFromPublic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageClasses_PrivateFromPublic_Call) RunAndReturn(run func(id.PublicID) (datastore.Batching, error)) *MockStorageClasses_PrivateFromPublic_Call {
	_c.Call.Return(run)
	return _c
}

// Public provides a mock function with given fields: pub
func (_m *MockStorageClasses) Public(pub id.PublicID) (datastore.Batching, error) {
	ret := _m.Called(pub)

	if len(ret) == 0 {
		panic("no return value specified for Public")
	}

	var r0 datastore.Batching
	var r1 error
	if rf, ok := ret.Get(0).(func(id.PublicID) (datastore.Batching, error)); ok {
		return rf(pub)
	}
	if rf, ok := ret.Get(0).(func(id.PublicID) datastore.Batching); ok {
		r0 = rf(pub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Batching)
		}
	}

	if rf, ok := ret.Get(1).(func(id.PublicID) error); ok {
		r1 = rf(pub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageClasses_Public_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Public'
type MockStorageClasses_Public_Call struct {
	*mock.Call
}

// Public is a helper method to define mock.On call
//   - pub id.PublicID
func (_e *MockStorageClasses_Expecter) Public(pub interface{}) *MockStorageClasses_Public_Call {
	return &MockStorageClasses_Public_Call{Call: _e.mock.On("Public", pub)}
}

func (_c *MockStorageClasses_Public_Call) Run(run func(pub id.PublicID)) *MockStorageClasses_Public_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(id.PublicID))
	})
	return _c
}

func (_c *MockStorageClasses_Public_Call) Return(_a0 datastore.Batching, _a1 error) *MockStorageClasses_Public_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageClasses_Public_Call) RunAndReturn(run func(id.PublicID) (datastore.Batching, error)) *MockStorageClasses_Public_Call {
	_c.Call.Return(run)
	return _c
}

// System provides a mock function with no fields
func (_m *MockStorageClasses) System() (datastore.Batching, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for System")
	}

	var r0 datastore.Batching
	var r1 error
	if rf, ok := ret.Get(0).(func() (datastore.Batching, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() datastore.Batching); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Batching)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageClasses_System_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'System'
type MockStorageClasses_System_Call struct {
	*mock.Call
}

// System is a helper method to define mock.On call
func (_e *MockStorageClasses_Expecter) System() *MockStorageClasses_System_Call {
	return &MockStorageClasses_System_Call{Call: _e.mock.On("System")}
}

func (_c *MockStorageClasses_System_Call) Run(run func()) *MockStorageClasses_System_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorageClasses_System_Call) Return(_a0 datastore.Batching, _a1 error) *MockStorageClasses_System_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageClasses_System_Call) RunAndReturn(run func() (datastore.Batching, error)) *MockStorageClasses_System_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageClasses creates a new instance of MockStorageClasses. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageClasses(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageClasses {
	mock := &MockStorageClasses{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
