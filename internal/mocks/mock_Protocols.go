// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	host "github.com/libp2p/go-libp2p/core/host"
	id "github.com/tcfw/otter/pkg/id"

	mock "github.com/stretchr/testify/mock"

	mux "github.com/gorilla/mux"

	network "github.com/libp2p/go-libp2p/core/network"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocol "github.com/libp2p/go-libp2p/core/protocol"
)

// MockProtocols is an autogenerated mock type for the Protocols type
type MockProtocols struct {
	mock.Mock
}

type MockProtocols_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProtocols) EXPECT() *MockProtocols_Expecter {
	return &MockProtocols_Expecter{mock: &_m.Mock}
}

// Dial provides a mock function with given fields: _a0, proto, remote, local
func (_m *MockProtocols) Dial(_a0 peer.ID, proto protocol.ID, remote id.PublicID, local id.PublicID) (network.Stream, error) {
	ret := _m.Called(_a0, proto, remote, local)

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 network.Stream
	var r1 error
	if rf, ok := ret.Get(0).(func(peer.ID, protocol.ID, id.PublicID, id.PublicID) (network.Stream, error)); ok {
		return rf(_a0, proto, remote, local)
	}
	if rf, ok := ret.Get(0).(func(peer.ID, protocol.ID, id.PublicID, id.PublicID) network.Stream); ok {
		r0 = rf(_a0, proto, remote, local)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Stream)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID, protocol.ID, id.PublicID, id.PublicID) error); ok {
		r1 = rf(_a0, proto, remote, local)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProtocols_Dial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dial'
type MockProtocols_Dial_Call struct {
	*mock.Call
}

// Dial is a helper method to define mock.On call
//   - _a0 peer.ID
//   - proto protocol.ID
//   - remote id.PublicID
//   - local id.PublicID
func (_e *MockProtocols_Expecter) Dial(_a0 interface{}, proto interface{}, remote interface{}, local interface{}) *MockProtocols_Dial_Call {
	return &MockProtocols_Dial_Call{Call: _e.mock.On("Dial", _a0, proto, remote, local)}
}

func (_c *MockProtocols_Dial_Call) Run(run func(_a0 peer.ID, proto protocol.ID, remote id.PublicID, local id.PublicID)) *MockProtocols_Dial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(protocol.ID), args[2].(id.PublicID), args[3].(id.PublicID))
	})
	return _c
}

func (_c *MockProtocols_Dial_Call) Return(_a0 network.Stream, _a1 error) *MockProtocols_Dial_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProtocols_Dial_Call) RunAndReturn(run func(peer.ID, protocol.ID, id.PublicID, id.PublicID) (network.Stream, error)) *MockProtocols_Dial_Call {
	_c.Call.Return(run)
	return _c
}

// DialContext provides a mock function with given fields: ctx, _a1, proto, remote, local
func (_m *MockProtocols) DialContext(ctx context.Context, _a1 peer.ID, proto protocol.ID, remote id.PublicID, local id.PublicID) (network.Stream, error) {
	ret := _m.Called(ctx, _a1, proto, remote, local)

	if len(ret) == 0 {
		panic("no return value specified for DialContext")
	}

	var r0 network.Stream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, protocol.ID, id.PublicID, id.PublicID) (network.Stream, error)); ok {
		return rf(ctx, _a1, proto, remote, local)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, protocol.ID, id.PublicID, id.PublicID) network.Stream); ok {
		r0 = rf(ctx, _a1, proto, remote, local)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Stream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, peer.ID, protocol.ID, id.PublicID, id.PublicID) error); ok {
		r1 = rf(ctx, _a1, proto, remote, local)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProtocols_DialContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DialContext'
type MockProtocols_DialContext_Call struct {
	*mock.Call
}

// DialContext is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 peer.ID
//   - proto protocol.ID
//   - remote id.PublicID
//   - local id.PublicID
func (_e *MockProtocols_Expecter) DialContext(ctx interface{}, _a1 interface{}, proto interface{}, remote interface{}, local interface{}) *MockProtocols_DialContext_Call {
	return &MockProtocols_DialContext_Call{Call: _e.mock.On("DialContext", ctx, _a1, proto, remote, local)}
}

func (_c *MockProtocols_DialContext_Call) Run(run func(ctx context.Context, _a1 peer.ID, proto protocol.ID, remote id.PublicID, local id.PublicID)) *MockProtocols_DialContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.ID), args[2].(protocol.ID), args[3].(id.PublicID), args[4].(id.PublicID))
	})
	return _c
}

func (_c *MockProtocols_DialContext_Call) Return(_a0 network.Stream, _a1 error) *MockProtocols_DialContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProtocols_DialContext_Call) RunAndReturn(run func(context.Context, peer.ID, protocol.ID, id.PublicID, id.PublicID) (network.Stream, error)) *MockProtocols_DialContext_Call {
	_c.Call.Return(run)
	return _c
}

// P2P provides a mock function with no fields
func (_m *MockProtocols) P2P() host.Host {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for P2P")
	}

	var r0 host.Host
	if rf, ok := ret.Get(0).(func() host.Host); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(host.Host)
		}
	}

	return r0
}

// MockProtocols_P2P_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'P2P'
type MockProtocols_P2P_Call struct {
	*mock.Call
}

// P2P is a helper method to define mock.On call
func (_e *MockProtocols_Expecter) P2P() *MockProtocols_P2P_Call {
	return &MockProtocols_P2P_Call{Call: _e.mock.On("P2P")}
}

func (_c *MockProtocols_P2P_Call) Run(run func()) *MockProtocols_P2P_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProtocols_P2P_Call) Return(_a0 host.Host) *MockProtocols_P2P_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProtocols_P2P_Call) RunAndReturn(run func() host.Host) *MockProtocols_P2P_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAPIHandler provides a mock function with given fields: _a0
func (_m *MockProtocols) RegisterAPIHandler(_a0 func(*mux.Route)) {
	_m.Called(_a0)
}

// MockProtocols_RegisterAPIHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAPIHandler'
type MockProtocols_RegisterAPIHandler_Call struct {
	*mock.Call
}

// RegisterAPIHandler is a helper method to define mock.On call
//   - _a0 func(*mux.Route)
func (_e *MockProtocols_Expecter) RegisterAPIHandler(_a0 interface{}) *MockProtocols_RegisterAPIHandler_Call {
	return &MockProtocols_RegisterAPIHandler_Call{Call: _e.mock.On("RegisterAPIHandler", _a0)}
}

func (_c *MockProtocols_RegisterAPIHandler_Call) Run(run func(_a0 func(*mux.Route))) *MockProtocols_RegisterAPIHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*mux.Route)))
	})
	return _c
}

func (_c *MockProtocols_RegisterAPIHandler_Call) Return() *MockProtocols_RegisterAPIHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProtocols_RegisterAPIHandler_Call) RunAndReturn(run func(func(*mux.Route))) *MockProtocols_RegisterAPIHandler_Call {
	_c.Run(run)
	return _c
}

// RegisterAPIHandlers provides a mock function with given fields: _a0
func (_m *MockProtocols) RegisterAPIHandlers(_a0 func(*mux.Router)) {
	_m.Called(_a0)
}

// MockProtocols_RegisterAPIHandlers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAPIHandlers'
type MockProtocols_RegisterAPIHandlers_Call struct {
	*mock.Call
}

// RegisterAPIHandlers is a helper method to define mock.On call
//   - _a0 func(*mux.Router)
func (_e *MockProtocols_Expecter) RegisterAPIHandlers(_a0 interface{}) *MockProtocols_RegisterAPIHandlers_Call {
	return &MockProtocols_RegisterAPIHandlers_Call{Call: _e.mock.On("RegisterAPIHandlers", _a0)}
}

func (_c *MockProtocols_RegisterAPIHandlers_Call) Run(run func(_a0 func(*mux.Router))) *MockProtocols_RegisterAPIHandlers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*mux.Router)))
	})
	return _c
}

func (_c *MockProtocols_RegisterAPIHandlers_Call) Return() *MockProtocols_RegisterAPIHandlers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProtocols_RegisterAPIHandlers_Call) RunAndReturn(run func(func(*mux.Router))) *MockProtocols_RegisterAPIHandlers_Call {
	_c.Run(run)
	return _c
}

// RegisterP2PHandler provides a mock function with given fields: _a0, handler
func (_m *MockProtocols) RegisterP2PHandler(_a0 protocol.ID, handler network.StreamHandler) {
	_m.Called(_a0, handler)
}

// MockProtocols_RegisterP2PHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterP2PHandler'
type MockProtocols_RegisterP2PHandler_Call struct {
	*mock.Call
}

// RegisterP2PHandler is a helper method to define mock.On call
//   - _a0 protocol.ID
//   - handler network.StreamHandler
func (_e *MockProtocols_Expecter) RegisterP2PHandler(_a0 interface{}, handler interface{}) *MockProtocols_RegisterP2PHandler_Call {
	return &MockProtocols_RegisterP2PHandler_Call{Call: _e.mock.On("RegisterP2PHandler", _a0, handler)}
}

func (_c *MockProtocols_RegisterP2PHandler_Call) Run(run func(_a0 protocol.ID, handler network.StreamHandler)) *MockProtocols_RegisterP2PHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.ID), args[1].(network.StreamHandler))
	})
	return _c
}

func (_c *MockProtocols_RegisterP2PHandler_Call) Return() *MockProtocols_RegisterP2PHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProtocols_RegisterP2PHandler_Call) RunAndReturn(run func(protocol.ID, network.StreamHandler)) *MockProtocols_RegisterP2PHandler_Call {
	_c.Run(run)
	return _c
}

// RegisterPOISHandler provides a mock function with given fields: _a0
func (_m *MockProtocols) RegisterPOISHandler(_a0 func(*mux.Route)) {
	_m.Called(_a0)
}

// MockProtocols_RegisterPOISHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPOISHandler'
type MockProtocols_RegisterPOISHandler_Call struct {
	*mock.Call
}

// RegisterPOISHandler is a helper method to define mock.On call
//   - _a0 func(*mux.Route)
func (_e *MockProtocols_Expecter) RegisterPOISHandler(_a0 interface{}) *MockProtocols_RegisterPOISHandler_Call {
	return &MockProtocols_RegisterPOISHandler_Call{Call: _e.mock.On("RegisterPOISHandler", _a0)}
}

func (_c *MockProtocols_RegisterPOISHandler_Call) Run(run func(_a0 func(*mux.Route))) *MockProtocols_RegisterPOISHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*mux.Route)))
	})
	return _c
}

func (_c *MockProtocols_RegisterPOISHandler_Call) Return() *MockProtocols_RegisterPOISHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProtocols_RegisterPOISHandler_Call) RunAndReturn(run func(func(*mux.Route))) *MockProtocols_RegisterPOISHandler_Call {
	_c.Run(run)
	return _c
}

// RegisterPOISHandlers provides a mock function with given fields: _a0
func (_m *MockProtocols) RegisterPOISHandlers(_a0 func(*mux.Router)) {
	_m.Called(_a0)
}

// MockProtocols_RegisterPOISHandlers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPOISHandlers'
type MockProtocols_RegisterPOISHandlers_Call struct {
	*mock.Call
}

// RegisterPOISHandlers is a helper method to define mock.On call
//   - _a0 func(*mux.Router)
func (_e *MockProtocols_Expecter) RegisterPOISHandlers(_a0 interface{}) *MockProtocols_RegisterPOISHandlers_Call {
	return &MockProtocols_RegisterPOISHandlers_Call{Call: _e.mock.On("RegisterPOISHandlers", _a0)}
}

func (_c *MockProtocols_RegisterPOISHandlers_Call) Run(run func(_a0 func(*mux.Router))) *MockProtocols_RegisterPOISHandlers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*mux.Router)))
	})
	return _c
}

func (_c *MockProtocols_RegisterPOISHandlers_Call) Return() *MockProtocols_RegisterPOISHandlers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProtocols_RegisterPOISHandlers_Call) RunAndReturn(run func(func(*mux.Router))) *MockProtocols_RegisterPOISHandlers_Call {
	_c.Run(run)
	return _c
}

// Registered provides a mock function with no fields
func (_m *MockProtocols) Registered() []protocol.ID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Registered")
	}

	var r0 []protocol.ID
	if rf, ok := ret.Get(0).(func() []protocol.ID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.ID)
		}
	}

	return r0
}

// MockProtocols_Registered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Registered'
type MockProtocols_Registered_Call struct {
	*mock.Call
}

// Registered is a helper method to define mock.On call
func (_e *MockProtocols_Expecter) Registered() *MockProtocols_Registered_Call {
	return &MockProtocols_Registered_Call{Call: _e.mock.On("Registered")}
}

func (_c *MockProtocols_Registered_Call) Run(run func()) *MockProtocols_Registered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProtocols_Registered_Call) Return(_a0 []protocol.ID) *MockProtocols_Registered_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProtocols_Registered_Call) RunAndReturn(run func() []protocol.ID) *MockProtocols_Registered_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterP2PHandler provides a mock function with given fields: _a0
func (_m *MockProtocols) UnregisterP2PHandler(_a0 protocol.ID) {
	_m.Called(_a0)
}

// MockProtocols_UnregisterP2PHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterP2PHandler'
type MockProtocols_UnregisterP2PHandler_Call struct {
	*mock.Call
}

// UnregisterP2PHandler is a helper method to define mock.On call
//   - _a0 protocol.ID
func (_e *MockProtocols_Expecter) UnregisterP2PHandler(_a0 interface{}) *MockProtocols_UnregisterP2PHandler_Call {
	return &MockProtocols_UnregisterP2PHandler_Call{Call: _e.mock.On("UnregisterP2PHandler", _a0)}
}

func (_c *MockProtocols_UnregisterP2PHandler_Call) Run(run func(_a0 protocol.ID)) *MockProtocols_UnregisterP2PHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.ID))
	})
	return _c
}

func (_c *MockProtocols_UnregisterP2PHandler_Call) Return() *MockProtocols_UnregisterP2PHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProtocols_UnregisterP2PHandler_Call) RunAndReturn(run func(protocol.ID)) *MockProtocols_UnregisterP2PHandler_Call {
	_c.Run(run)
	return _c
}

// NewMockProtocols creates a new instance of MockProtocols. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProtocols(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProtocols {
	mock := &MockProtocols{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
